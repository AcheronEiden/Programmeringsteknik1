# ************************************************************
# Alhassan Jawad - 000109XXXX
# Civ.Elektroteknik - År 2
# 8-9-2020
# Programmeringsteknik 1 Obligatorisk uppgift 1 - deluppgift 1
# ************************************************************

import turtle

def tricolore(x, y, h):
    w = h/2
    rectangle(x, y, w, h, 'blue')
    rectangle(x+w, y, w, h, 'white')
    rectangle(x+2*w, y, w, h, 'red')


def rectangle(x, y, width, height, color):
    t = make_turtle(x, y)
    t.speed(0)
    t.hideturtle()
    t.fillcolor(color)
    t.begin_fill()
    for dist in [width, height, width, height]:
        t.forward(dist)
        t.left(90)
    t.end_fill()


def pentagram(x,y,side):
    t=make_turtle(x,y)
    t.hideturtle()
    t.setheading(270-36/2)
    t.fillcolor('green')
    t.begin_fill()
    for i in range(5):      
        t.speed(0)
        t.forward(side)
        t.left(180-36)
    t.end_fill()


def make_turtle(x, y):
    t = turtle.Turtle()
    jump(t, x, y)
    return t


def jump(t, x, y):
    t.penup()
    t.goto(x, y)
    t.pendown()


h = 200
x = -150
y = -100
side = 100
t = 0
tricolore(x,y,h)    # Börjar rita flaggan
for n in range(5):
    pentagram(x-50+t, y-50, side)
    pentagram(x-50+t, y+350, side)
    t += 100



# ************************************************************
# Alhassan Jawad - 000109XXXX
# Civ.Elektroteknik - År 2
# 8-9-2020
# Programmeringsteknik 1 Obligatorisk uppgift 1 - deluppgift 2
# ************************************************************

import turtle

def vietnamese_flag(x, y, height):
    width=1.5*height  # För att uppfylla ratio
    color = 'red'
    rectangle(x, y, width, height, color)
    t=turtle.Turtle()
    t.hideturtle()
    w = width/2       # För att flytta stjärnan i sidled
    h = height*(3/4)  # För att flytta stjärnana uppåt
    t.penup()
    side = height/2   # Pentagramets sidolängd
    pentagram(x+w, y+h, side)


def pentagram(x,y,side):
    t=make_turtle(x,y)
    t.hideturtle()
    t.setheading(270-36/2)
    t.pendown()
    t.color('yellow')
    t.fillcolor('yellow')
    t.begin_fill()
    for i in range(5):      
        t.speed(0)
        t.forward(side)
        t.left(180-36)
    t.end_fill()


def rectangle(x, y, width, height, color):
    t = make_turtle(x, y)
    t.speed(0)
    t.hideturtle()
    t.color('red')
    t.fillcolor(color)
    t.begin_fill()
    for dist in [width, height, width, height]:
        t.forward(dist)
        t.left(90)
    t.end_fill()


def make_turtle(x, y):
    t = turtle.Turtle()
    jump(t, x, y)
    return t


def jump(t, x, y):
    t.penup()
    t.goto(x, y)
    t.pendown()

print(vietnamese_flag(-85,-140,300))


# ************************************************************
# Alhassan Jawad - 000109XXXX
# Civ.Elektroteknik - År 2
# 9-9-2020
# Programmeringsteknik 1 Obligatorisk uppgift 1 - delupgift 3
# ************************************************************

import turtle
import random

# Skapar paddorna
t = turtle.Turtle()
u = turtle.Turtle()
u.color('green')
v = turtle.Turtle()
v.color('red')

def rectangle(x, y, width, height, color):
    t = make_turtle(x, y)
    t.speed(8)
    t.hideturtle()
    t.fillcolor(color)
    t.begin_fill()
    for dist in [width, height, width, height]:
        t.forward(dist)
        t.left(90)
    t.end_fill()

def make_turtle(x, y):
    t = turtle.Turtle()
    jump(t, x, y)
    return t


def jump(t, x, y):
    t.penup()
    t.goto(x, y)
    t.pendown()

    
def move_random(t):
    if t.xcor() > 250 or t.xcor() < -250 or t.ycor() > 250 \
       or t.ycor() < -250: # Punkt 8
        t.setheading(t.towards(0, 0))
    t.left(random.randint(-45, 46))   # Punkt 4
    t.forward(random.randint(0, 26))  # Punkt 4
    

rectangle(-250, -250, 500, 500, 'lightblue') # Punkt 5
jump(u, random.randint(-250, 250),\
     random.randint(-250, 250)) # Punkt 6

ggr = 0
for i in range (1, 500): # Punkt 7
    jump(v, v.xcor(), v.ycor())
    move_random(v)
    jump(u, u.xcor(), u.ycor())
    move_random(u)

    if v.distance(u) < 50:
        v.write('There you are!')
           
    if u.distance(v) < 50: # Punkt 9
        u.write('Close')
        ggr += 1
print('Close calls: ', ggr)